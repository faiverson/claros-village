// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String           @unique
  emailVerified       DateTime?        @map("email_verified")
  password            String?
  active              Boolean          @default(false)
  avatar              String?
  role                Role             @default(RENTER)
  phone               String?
  verificationToken   String?          @map("verification_token")
  verificationExpires DateTime?        @map("verification_expires")
  createdAt           DateTime         @default(now()) @map(name: "created_at")
  updatedAt           DateTime         @updatedAt @map(name: "updated_at")
  accounts            Account[]
  sessions            Session[]
  residents           UserResident[]
  sum_reservations    SumReservation[]

  @@map(name: "users")
}

model Resident {
  id              String         @id @default(cuid())
  name            String
  email           String         @unique
  email_owners    String[]
  email_expenses  String[]
  manzana         String
  lote            String
  unidad          String
  phone           String
  phones          String[]
  is_owner        Boolean
  is_duplex       Boolean
  numero_expensas String?
  direccion       String?
  floor           String?
  departament     String?
  neighborhood    String?
  users           UserResident[]
  createdAt       DateTime       @default(now()) @map(name: "created_at")

  @@map(name: "residents")
}

model UserResident {
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  residentId String
  resident   Resident @relation(fields: [residentId], references: [id])

  @@id([userId, residentId])
  @@map(name: "users_residents")
}

enum Role {
  LANDLORD @map("landlord")
  RENTER   @map("renter")
  ADMIN    @map("admin")
  MANAGER  @map("manager")
  GUARD    @map("guard")

  @@map("roles")
}

model SumReservation {
  id          String   @id @default(cuid())
  shift       String
  roomSmall   Boolean  @map(name: "room_small")
  roomBig     Boolean  @map(name: "room_big")
  dateAt      DateTime @map(name: "date_at")
  userId      String   @map(name: "user_id")
  reservedAt  DateTime @default(now()) @map(name: "reserved_at")
  observation String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sum_reservations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationTokenType {
  REGISTER @map("register")
}

model VerificationToken {
  identifier String
  type       VerificationTokenType @default(REGISTER)
  token      String                @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())

  @@map(name: "contact_submissions")
}
