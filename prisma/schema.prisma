generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                  String    @default(cuid()) @id
  name                String?
  email               String?    @unique
  password            String?
  active              Boolean   @default(false)
  emailVerified       DateTime? @map("email_verified")
  accounts            Account[]
  avatar              String?
  residents           UserResident[]
  sum_reservations    SumReservation[]
  role                Role
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "users")
}

model Resident {
  id                  String    @default(cuid()) @id
  name                String
  email               String    @unique
  email_owners        String[]
  email_expenses      String[]
  manzana             String
  lote                String
  unidad              String
  phone               String
  phones              String[]
  is_owner            Boolean
  is_duplex           Boolean
  numero_expensas     String?
  direccion           String?
  floor               String?
  departament         String?
  neighborhood        String?
  users  UserResident[]
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  @@map(name: "residents")
}

model UserResident {
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  residentId String
  resident  Resident @relation(fields: [residentId], references: [id])

  @@id([userId, residentId])
}

enum Role {
  LANDLORD @map("landlord")
  RENTER  @map("renter")
  ADMIN @map("admin")
  MANAGER @map("manager")
  GUARD @map("guard")
  @@map("roles")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map(name: "accounts")
}

model SumReservation {
  id          String    @default(cuid()) @id
  shift       String
  roomSmall   Boolean  @map(name: "room_small")
  roomBig     Boolean  @map(name: "room_big")
  dateAt      DateTime @map(name: "date_at")
  userId      String   @map(name: "user_id")
  reservedAt  DateTime  @default(now()) @map(name: "reserved_at")
  observation String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sum_reservations")
}
